rg=appgw-multisites
location=centralindia

vnet_name=vnet
vnet_address=10.11.0.0/16
appgw_subnet_name=appgw
appgw_subnet_address=10.11.0.0/24
vm_subnet_name=vm
vm_subnet_address=10.11.1.0/24

vm1_name=site1
vm2_name=site2
appgw_name=appgw

admin_username=$(whoami)
admin_password=Test#123#123
vm_size=Standard_B2ats_v2
vm_image=$(az vm image list -l $location -p Canonical -s 22_04-lts --all --query "[?offer=='0001-com-ubuntu-server-jammy'].urn" -o tsv | sort -u | tail -n 1) && echo $vm_image

cloudinit_file=~/cloudinit.txt
cat <<EOF > $cloudinit_file
#cloud-config
runcmd:
  - apt update && apt-get install -y dotnet-sdk-8.0 nginx git
  - mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
  - cd /etc/nginx/sites-available/ && curl -O https://raw.githubusercontent.com/wshamroukh/nginx-aspdotnet/refs/heads/main/default
  - git clone https://github.com/jelledruyts/InspectorGadget /var/www/InspectorGadget
  - mv /var/www/InspectorGadget/WebApp /var/www/ && rm -rf /var/www/InspectorGadget
  - cd /etc/systemd/system/ && curl -O https://raw.githubusercontent.com/wshamroukh/nginx-aspdotnet/refs/heads/main/inspectorg.service
  - systemctl enable inspectorg && systemctl start inspectorg
  - nginx -t && nginx -s reload
  - reboot
EOF

# Resource Groups
echo -e "\e[1;36mCreating $rg Resource Group...\e[0m"
az group create -l $location -n $rg -o none

# vnet
echo -e "\e[1;36mCreating $vnet_name VNet...\e[0m"
az network vnet create -g $rg -n $vnet_name -l $location --address-prefixes $vnet_address --subnet-name $appgw_subnet_name --subnet-prefixes $appgw_subnet_address -o none
az network vnet subnet create -g $rg -n $vm_subnet_name --address-prefixes $vm_subnet_address --vnet-name $vnet_name -o none

# vm1
echo -e "\e[1;36mDeploying $vm1_name VM...\e[0m"
az network nic create -g $rg -n $vm1_name -l $location --vnet-name $vnet_name --subnet $vm_subnet_name -o none
az vm create -g $rg -n $vm1_name -l $location --image $vm_image --nics $vm1_name --os-disk-name $vm1_name --size $vm_size --admin-username $admin_username --admin-password $admin_password --custom-data $cloudinit_file --no-wait
vm1_ip=$(az network nic show -g $rg -n $vm1_name --query ipConfigurations[0].privateIPAddress -o tsv) && echo $vm1_name vm private ip: $vm1_ip

# vm2
echo -e "\e[1;36mDeploying $vm2_name VM...\e[0m"
az network nic create -g $rg -n $vm2_name -l $location --vnet-name $vnet_name --subnet $vm_subnet_name -o none
az vm create -g $rg -n $vm2_name -l $location --image $vm_image --nics $vm2_name --os-disk-name $vm2_name --size $vm_size --admin-username $admin_username --admin-password $admin_password --custom-data $cloudinit_file --no-wait
vm2_ip=$(az network nic show -g $rg -n $vm2_name --query ipConfigurations[0].privateIPAddress -o tsv) && echo $vm2_name vm private ip: $vm2_ip

# clean up cloudinit file
rm $cloudinit_file

# application gateway
echo -e "\e[1;36mCreating $appgw_name Application Gateway...\e[0m"
az network public-ip create -g $rg -n $appgw_name-ip --allocation-method Static --sku Standard -o none
appgwpip=$(az network public-ip show -g $rg -n $appgw_name-ip --query ipAddress -o tsv)
az network application-gateway create -g $rg -n $appgw_name --capacity 1 --sku Standard_v2 --vnet-name $vnet_name --public-ip-address $appgw_name-ip --subnet $appgw_subnet_name --priority 100 -o none
appgwprivip=$(az network application-gateway show -g $rg -n $appgw_name --query frontendIPConfigurations[0].privateIPAddress -o tsv)
frontendid=$(az network application-gateway show -g $rg -n $appgw_name --query frontendIPConfigurations[0].id -o tsv)
frontendportid=$(az network application-gateway show -g $rg -n $appgw_name --query frontendPorts[0].id -o tsv)

echo -e "\e[1;36mCreating a backend pool in $appgw_name Application Gateway for $vm1_name...\e[0m"
az network application-gateway address-pool create -g $rg -n $vm1_name-pool --gateway-name $appgw_name --servers $vm1_ip -o none

echo -e "\e[1;36mCreating a backend pool in $appgw_name Application Gateway for $vm2_name...\e[0m"
az network application-gateway address-pool create -g $rg -n $vm2_name-pool --gateway-name $appgw_name --servers $vm2_ip -o none

echo -e "\e[1;36mCreating an HTTP listener in $appgw_name Application Gateway for $vm1_name...\e[0m"
az network application-gateway http-listener create -g $rg -n $vm1_name-http-listener --gateway-name $appgw_name --frontend-ip $frontendid --frontend-port $frontendportid --host-name ${vm1_name}.${appgwpip}.nip.io -o none

echo -e "\e[1;36mCreating an HTTP listener in $appgw_name Application Gateway for $vm2_name...\e[0m"
az network application-gateway http-listener create -g $rg -n $vm2_name-http-listener --gateway-name $appgw_name --frontend-ip $frontendid --frontend-port $frontendportid --host-name ${vm2_name}.${appgwpip}.nip.io -o none

echo -e "\e[1;36mDeleteing default listener in $appgw_name Application Gateway as it is not needed anymore...\e[0m"
az network application-gateway http-listener delete -g $rg -n appGatewayHttpListener --gateway-name $appgw_name -o none

echo -e "\e[1;36mCreating a routing rule in $appgw_name Application Gateway for $vm1_name...\e[0m"
az network application-gateway rule create -g $rg -n $vm1_name-routing-rule --gateway-name $appgw_name --address-pool $vm1_name-pool --http-listener $vm1_name-http-listener --rule-type Basic --priority 200 -o none

echo -e "\e[1;36mCreating a routing rule in $appgw_name Application Gateway for $vm2_name...\e[0m"
az network application-gateway rule create -g $rg -n $vm2_name-routing-rule --gateway-name $appgw_name --address-pool $vm2_name-pool --http-listener $vm2_name-http-listener --rule-type Basic --priority 300 -o none

echo -e "\e[1;36mDeleteing default routing rule in $appgw_name Application Gateway as it is not needed anymore...\e[0m"
az network application-gateway rule delete -g $rg -n rule1 --gateway-name $appgw_name -o none

echo try now to access the first site: http://${vm1_name}.${appgwpip}.nip.io
echo try now to access the second site: http://${vm2_name}.${appgwpip}.nip.io